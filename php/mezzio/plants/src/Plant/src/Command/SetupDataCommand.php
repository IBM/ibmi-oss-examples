<?php

declare(strict_types=1);

/**
 * SetupDataCommand.php
 *
 * @author: Yeshua Hall <yeshua@sobo.red>
 * @date: 8/23/22
 */

namespace Plant\Command;

use Exception;
use Laminas\Db\Adapter\Driver\ConnectionInterface;
use Plant\Entity\PlantEntity;
use Plant\TableGateway\PlantTableGateway;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Console\Style\SymfonyStyle;

class SetupDataCommand extends Command
{
    private $plantModel;
    protected static $defaultName = 'plant:setup-data';
    protected static $defaultDescription = 'Setup example data for plant module.';

    public function __construct(PlantTableGateway $plantModel, string $name = null)
    {
        $this->plantModel = $plantModel;
        parent::__construct($name);
    }

    protected function execute(InputInterface $input, OutputInterface $output) : int
    {
        $io = new SymfonyStyle($input, $output);
        $overwrite = $initialize = true;
        $data = [];
        $db2Conn = $this->plantModel->getAdapter()->getDriver()->getConnection();
        $result = $db2Conn->execute("SELECT COUNT(*) as NUM FROM qsys2.tables WHERE table_name = 'PLANTS'");
        $count = $result->current();
        $tableExists = !empty($count) && !empty($count['NUM']);

        if ($tableExists) {
            $confirmOverwrite = new ConfirmationQuestion('The example table, PLANTS, already exists. Would you like to overwrite it?', false);
            $overwrite = $io->askQuestion($confirmOverwrite);

            if ($overwrite) {
                $dropPlants = "DROP TABLE plants";
                $db2Conn->execute($dropPlants);
            } else {
                $confirmInitialize = new ConfirmationQuestion('Would you like to add example data to the existing table?', false);
                $initialize = $io->askQuestion($confirmInitialize);
            }
        }

        if (!$tableExists || $overwrite) {
            try {
                $this->createTable($db2Conn, $io);
            } catch (Exception $e) {
                return $this->error($io, 'Error while creating table: ' . $e->getMessage());
            }
        }

        if ($initialize) {
            try {
                $data = $this->initializeData($io);
            } catch (Exception $e) {
                return $this->error($io, 'Error while initializing records: ' . $e->getMessage());
            }
        }

        if (!empty($data)) {
            $this->showData($data, $io);
        }

        return 0;
    }

    private function createTable(ConnectionInterface $db2Conn, SymfonyStyle $io) : void
    {
        $createPlants = <<<SQL
        CREATE TABLE plants(
            id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY,
            name varchar(256) not null,
            nickname varchar(256),
            wiki varchar(256)
        )
        SQL;

        $io->info('Attempting to create PLANTS table.');
        $db2Conn->execute($createPlants);
        $io->success('PLANTS table successfully created.');
    }

    /**
     * @throws Exception
     */
    private function initializeData(SymfonyStyle $io) : array
    {
        $io->info('Attempting to initialize PLANTS records.');

        $plant1 = PlantEntity::create(
            'Monstera deliciosa',
            'https://en.wikipedia.org/wiki/Monstera_deliciosa'
        );
        $plant2 = PlantEntity::create(
            'Monstera adansonii',
            'https://en.wikipedia.org/wiki/Monstera_adansonii',
            'Swiss cheese plant'
        );
        $plant3 = PlantEntity::create(
            'Anthurium warocqueanum',
            'https://en.wikipedia.org/wiki/Anthurium_warocqueanum',
            'Queen anthurium'
        );

        $plants = [$plant1, $plant2, $plant3];
        $data = [];

        foreach ($plants as $plant) {
            $plantId = $this->plantModel->save($plant);
            $data[] = $this->plantModel->get($plantId)->current();
        }

        $io->success('PLANTS records initialized successfully.');

        return $data;
    }

    private function showData(array $data, SymfonyStyle $io) : void
    {
        $headers = ['ID', 'Name', 'Nickname', 'Wikipedia URL'];
        $io->table($headers, [
            [$data[0]->id, $data[0]->name, $data[0]->nickname, $data[0]->wiki],
            [$data[1]->id, $data[1]->name, $data[1]->nickname, $data[1]->wiki],
            [$data[2]->id, $data[2]->name, $data[2]->nickname, $data[2]->wiki],
        ]);
    }

    private function error(SymfonyStyle $io, string $message) : int
    {
        $io->error($message);
        return 1;
    }
}
