/* eslint-disable new-cap */
const { dbconn, dbstmt } = require('idb-connector');

const connection = new dbconn();

connection.conn('*LOCAL');

let statement = new dbstmt(connection);

const schema = 'BEARS';
const table = 'BEAR';

const checkTable = `SELECT TABLE_SCHEMA FROM QSYS2.SYSTABLES where TABLE_NAME='${table}'`;
const createSchema = `CREATE SCHEMA ${schema}`;
const createTable = `CREATE TABLE ${schema}.${table}(id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY, name varchar(256) not null)`;
const insertBear = `INSERT INTO ${schema}.${table}(name) VALUES('grizzly bear')`;
statement.exec(checkTable, (result, error) => {
  if (error) {
    console.log('check table error');
    throw error;
  }
  statement.close();
  statement = new dbstmt(connection);

  if (result.length) {
    result.forEach((element) => {
      if (element.TABLE_SCHEMA === schema) {
        console.log('Schmea and Table already exist!');
        process.exit(0);
      }
    });
  }
  statement.exec(createSchema, (schemaResult, schemaError) => {
    if (schemaError) {
      throw schemaError;
    }
    console.log(`${schema} created!`);
    statement.close();
    statement = new dbstmt(connection);

    statement.exec(createTable, (tableResult, tableError) => {
      if (tableError) {
        console.log('create table error');
        throw tableError;
      }
      console.log(`${schema}.${table} created!`);
      statement.close();
      statement = new dbstmt(connection);
      statement.exec(insertBear, (insertResult, insertError) => {
        if (insertError) {
          console.log('insert bear error');
          throw insertError;
        }
        console.log('added bear');
      });
    });
  });
});
